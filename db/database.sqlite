categories.js-------------------------const express = require('express');const router = express.Router();const db = require('../database'); // Adjust the path if necessary// Get all categoriesrouter.get('/', (req, res) => {    db.all('SELECT * FROM categories', (err, rows) => {        if (err) {            return res.status(500).json({ error: 'Internal server error' });        }        res.json(rows);    });});// Get a category by IDrouter.get('/:id', (req, res) => {    const { id } = req.params;    db.get('SELECT * FROM categories WHERE id = ?', [id], (err, row) => {        if (err) {            return res.status(500).json({ error: 'Internal server error' });        }        if (!row) {            return res.status(404).json({ error: 'Category not found' });        }        res.json(row);    });});// Add a new categoryrouter.post('/', (req, res) => {    const { name } = req.body;    db.run('INSERT INTO categories (name) VALUES (?)', [name], function(err) {        if (err) {            return res.status(500).json({ error: 'Failed to add category' });        }        res.status(201).json({ id: this.lastID, name });    });});// Update a category by ID// Update a category by IDrouter.put('/:id', (req, res) => {    const { id } = req.params;    const { name } = req.body;    db.run('UPDATE categories SET name = ? WHERE id = ?', [name, id], function(err) {        if (err) {            return res.status(500).json({ error: 'Failed to update category' });        }        if (this.changes === 0) {            return res.status(404).json({ error: 'Category not found' });        }        res.json({ id, name });    });});// Delete a category by IDrouter.delete('/:id', (req, res) => {    const { id } = req.params;    db.run('DELETE FROM categories WHERE id = ?', [id], function(err) {        if (err) {            return res.status(500).json({ error: 'Failed to delete category' });        }        if (this.changes === 0) {            return res.status(404).json({ error: 'Category not found' });        }        res.status(204).send(); // No content to send back    });});module.exports = router;--------------------------------------transactions.js-------------------------------const express = require('express');const router = express.Router();const db = require('../database');// Function to add a new transactionconst addTransaction = (transaction, callback) => {    const { description, amount, date, category_id } = transaction;    db.run(`INSERT INTO transactions (description, amount, date, category_id) VALUES (?, ?, ?, ?)`, [description, amount, date, category_id], function(err) {        callback(err, { id: this.lastID, description, amount, date, category_id });    });};// Function to get all transactionsconst getAllTransactions = (callback) => {    db.all(`SELECT transactions.id, transactions.description, transactions.amount, transactions.date, categories.name AS category             FROM transactions             JOIN categories ON transactions.category_id = categories.id`,             [], (err, rows) => {                callback(err, rows);            });};// Function to get a transaction by IDconst getTransactionById = (id, callback) => {    db.get(`SELECT transactions.id, transactions.description, transactions.amount, transactions.date, categories.name AS category             FROM transactions             JOIN categories ON transactions.category_id = categories.id             WHERE transactions.id = ?`, [id], (err, row) => {                callback(err, row);            });};// Function to update a transaction by IDconst updateTransactionById = (id, transaction, callback) => {    const { description, amount, date, category_id } = transaction;    db.run(`UPDATE transactions SET description = ?, amount = ?, date = ?, category_id = ? WHERE id = ?`,            [description, amount, date, category_id, id], function(err) {               callback(err, { id, description, amount, date, category_id });           });};// Function to delete a transaction by IDconst deleteTransactionById = (id, callback) => {    db.run(`DELETE FROM transactions WHERE id = ?`, [id], function(err) {        callback(err, { deletedId: id });    });};// Function to get transaction summaryconst getTransactionSummary = (callback) => {    db.all(`SELECT                 SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) AS total_income,                SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) AS total_expenses,                SUM(amount) AS balance             FROM transactions`, [], (err, row) => {                callback(err, row);            });};// Route to add a new transactionrouter.post('/', (req, res) => {    addTransaction(req.body, (err, transaction) => {        if (err) return res.status(500).json({ error: 'Failed to add transaction' });        res.status(201).json(transaction);    });});// Route to get all transactionsrouter.get('/', (req, res) => {    getAllTransactions((err, transactions) => {        if (err) return res.status(500).json({ error: 'Failed to fetch transactions' });        res.json(transactions);    });});// Route to get a transaction by IDrouter.get('/:id', (req, res) => {    const transactionId = req.params.id;    getTransactionById(transactionId, (err, transaction) => {        if (err) return res.status(500).json({ error: 'Failed to fetch transaction' });        if (!transaction) return res.status(404).json({ error: 'Transaction not found' });        res.json(transaction);    });});// Route to update a transaction by IDrouter.put('/:id', (req, res) => {    const transactionId = req.params.id;    updateTransactionById(transactionId, req.body, (err, transaction) => {        if (err) return res.status(500).json({ error: 'Failed to update transaction' });        res.json(transaction);    });});// Route to delete a transaction by IDrouter.delete('/:id', (req, res) => {    const transactionId = req.params.id;    deleteTransactionById(transactionId, (err, result) => {        if (err) return res.status(500).json({ error: 'Failed to delete transaction' });        res.json(result);    });});// Route to get transaction summaryrouter.get('/summary', (req, res) => {    getTransactionSummary((err, summary) => {        if (err) return res.status(500).json({ error: 'Failed to fetch summary' });        res.json(summary);    });});module.exports = router;----------------------------------------app.js----------------------const express = require('express');const bodyParser = require('body-parser');const sqlite3 = require('sqlite3').verbose();const path = require('path');const categoryRoutes = require('./routes/categories'); // Adjust the path if necessaryconst transactionRoutes = require('./routes/transactions'); // Ensure you have this file as wellconst app = express();const PORT = 3000;// Serve static files from the "public" directoryapp.use(express.static(path.join(__dirname, 'public')));// Body parser middlewareapp.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: true }));// Initialize SQLite databaseconst db = new sqlite3.Database('./database.db', (err) => {    if (err) {        return console.error('Error connecting to SQLite database:', err.message);    }    console.log('Connected to SQLite database.');});// Create categories table if not existsdb.run(`CREATE TABLE IF NOT EXISTS categories (    id INTEGER PRIMARY KEY AUTOINCREMENT,    name TEXT NOT NULL UNIQUE)`, (err) => {    if (err) {        console.error('Error creating categories table:', err.message);    } else {        console.log('Categories table ready.');    }});// Create transactions table if not existsdb.run(`CREATE TABLE IF NOT EXISTS transactions (    id INTEGER PRIMARY KEY AUTOINCREMENT,    description TEXT NOT NULL,    amount REAL NOT NULL,    date TEXT NOT NULL,    category_id INTEGER NOT NULL,    FOREIGN KEY (category_id) REFERENCES categories(id))`, (err) => {    if (err) {        console.error('Error creating transactions table:', err.message);    } else {        console.log('Transactions table ready.');    }});// Use category routesapp.use('/categories', categoryRoutes); // Ensure you have the categories routes// Use transaction routesapp.use('/transactions', transactionRoutes); // Ensure you have the transactions routes// Start the serverapp.listen(PORT, () => {    console.log(`Server running on port ${PORT}`);});